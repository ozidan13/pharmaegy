// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PHARMACIST
  PHARMACY_OWNER
  ADMIN
}

enum SubscriptionPlan {
  FREE
  STANDARD
  PREMIUM
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  PENDING
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  REJECTED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  role          UserRole
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  pharmacistProfile PharmacistProfile?
  pharmacyOwnerProfile PharmacyOwnerProfile?
  adminProfile AdminProfile?
  paymentRequests PaymentRequest[]
}

model PharmacistProfile {
  id          String  @id @default(cuid())
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName   String
  lastName    String
  phoneNumber String?
  cvUrl       String? // URL to the stored CV file
  bio         String?
  experience  String? // Could be structured JSON or text
  education   String? // Could be structured JSON or text
  // Location information
  city        String
  area        String?  // Optional: more specific area within the city
  available   Boolean @default(true) // Availability status
  // Subscription information
  subscriptionPlan   SubscriptionPlan   @default(FREE)
  subscriptionStatus SubscriptionStatus @default(ACTIVE)
  subscriptionExpiresAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PharmacyOwnerProfile {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  pharmacyName  String
  contactPerson String
  phoneNumber   String?
  address       String?
  // Location information
  city          String
  area          String?  // Optional: more specific area within the city
  // Subscription information
  subscriptionPlan   SubscriptionPlan   @default(FREE)
  subscriptionStatus SubscriptionStatus @default(ACTIVE)
  subscriptionExpiresAt DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  products      Product[]
}

model SubscriptionPricing {
  id       String           @id @default(cuid())
  plan     SubscriptionPlan @unique
  price    Float            // Price in Egyptian Pounds
  currency String           @default("EGP")
  features Json?            // JSON object containing plan features
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Product {
  id            String    @id @default(cuid())
  name          String
  description   String?
  price         Float
  category      String    // e.g., Cosmetics, Healthcare
  isNearExpiry  Boolean   @default(false)
  expiryDate    DateTime?
  imageUrl      String?
  stock         Int       @default(0)
  pharmacyOwnerId String
  pharmacyOwner PharmacyOwnerProfile @relation(fields: [pharmacyOwnerId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model AdminProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentRequest {
  id                String        @id @default(cuid())
  userId            String
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionPlan  SubscriptionPlan
  amount            Float
  currency          String        @default("EGP")
  walletAddress     String        // Platform wallet address to receive payment
  userWalletAddress String?       // User's wallet address they sent from
  transactionHash   String?       // Optional transaction hash
  status            PaymentStatus @default(PENDING)
  confirmedBy       String?       // Admin ID who confirmed the payment
  confirmedAt       DateTime?
  rejectedReason    String?       // Reason for rejection if applicable
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model WalletConfig {
  id            String   @id @default(cuid())
  walletAddress String   @unique
  currency      String   @default("EGP")
  isActive      Boolean  @default(true)
  description   String?  // e.g., "Main payment wallet"
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}